
import java:java.lang.CharSequence;

// Syntax: Type definition
type TestPerson {
    // Variables
    CharSequence firstName = "Jim";
    CharSequence lastName;
    CharSequence fullName;

    // Associations

    // Syntax: Function definition
    function void main(CharSequence args) {

        // Syntax: Object creation with ordered variables
        TestPerson jimTuple1 = Person ["Jim", "Coles"];

        // Syntax: Object creation with named variables
        TestPerson jimTuple2 = Person [firstName = "Jim", lastName = "Coles"];

        // Syntax: Function calls with tuple variables

        JnOpSys.println( jimTuple2 );

        // Syntax: Function call with anonymous tuple

        JnOpSys.println( ["Elvis", "Presley"] );

    }

}

type Address {

    // Variables
    CharSequence streetAddr;
    CharSequence cityAddr;
    //
    CharSequence streetNumber;
    CharSequence streetRoad;
    int unitNumber;

    // Syntax: Equation Definition
    equation streetAddrFormatUSCommon {
        // Syntax: Equality Constraint as Grammar expression
        //        streetAddr ==  gramex streetNumber streetRoad unitNumber? }

        (true == true)

    }

    // Syntax: Function Definition
    function streetAddr streetFromParts()
        solves streetAddrFormatUSCommon
    {
        // Assignment, not equivalence
        streetAddr = streetNumber.append(streetRoad).append(unitNumber);
    }

}

type City {
    CharSequence cityKey;
    CharSequence cityDefaultName;
}

// Detached Association def
assoc PersonAddresses {

    @leftEnd = [ endType = Person
     //,  nav = true;
    ]

    @rightEnd = [ endType = Address, multiplicity = many, isList = true ]

}

type Triangle {
    real a;
    real b;
    real c;
    //
    real abAngle;
    real bcAngle;
    real caAngle;

    equation sidesAngleAngles {
        ( ( a + ( b + c ) ) == 0 )
    }

}