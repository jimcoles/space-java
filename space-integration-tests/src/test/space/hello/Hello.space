// import java:java.lang.CharSequence;
import space.lang.OpSys;

public type Hello
/*
 This is a smart annotation comment for my awesome space.
*/
{
    // var list
    int myIntInstVar = 127;
    boolean myBoolInstVar = false;

    // assoc list
    char[] greetingInstSeq = "Hello from this reference to a CharSequence.";

    {
        // nested init block
    }

    // streams / sequences

    // A general binary stream. Like an RDB 'blob'. Can read/write any bit sequence to/from a bstream.
//    bstream aBinaryStream;

    // character sequence (finite) - a special kind of bstream
//    cseq aCharSeq = "";
//    cseq greeting = "Hello from this reference to a CharSequence.";

    // functions
    function void main(char[][] args)
    {   // statement block: may include block-local vars, objects, spaces + any other statement type
        boolean boolTooLocal = true;
        OpSys.println( ["Hello, Space! (string literal)"] );
        OpSys.println( [greetingInstSeq] );
//        OpSys.println( [another] );
        OpSys.println( [myIntInstVar] );
        OpSys.println( [myBoolInstVar] );
        OpSys.println( [boolTooLocal] );

        foo( [args] );  // call from within a function
        {
            // other block
        }

        // Use return value
        OpSys.println( [AnotherType.getInt()] );
        OpSys.println( [AnotherType.getReal()] );
        OpSys.println( [AnotherType.getBool()] );

        if (true) {
            // var
            // ref
            // statement 1
            // next block-like
        }

        foreach myTuple in mySpace {
            // var
            // ref
            // statement 1
            // nested blocks
        }
    }

    function void foo(char[] args) {
        OpSys.println( [args] );
    }

}

public type AnotherType {

    function int getInt() {
        return ((((1 + 2) + 3) - 2) / 2);
    }

    function real getReal() {
        return ((((1 + 2.0) + 3) - 2) / 2.0);
    }

    function boolean getBool() {
        return ((1 == 1) && (3 < 4));
    }

}

