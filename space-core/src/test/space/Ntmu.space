
public type NtmuSpace
/*
 This is a smart annotation comment for my awesome space.
*/
{
    function void main(char[] args) {
        char[] test = "".split("");
        char[] appStr = Lang.append(["firstHalf", "lastHalf"]);
        Person jim = Person[53.75, "Jim", "Coles", "last"];
//        Person wango = Person[last = "Coles", first = "Jim", last = "last", age = 53.75];
        Task task = Task[2000.0, "Git 'er done, boy!", jim];
        Task task2 = Task[9.0, "Go play with your Bronster.", jim];
//        Task task3 = Task[9.0, "Do it till ya satisfied", wango];

        // Literal Tuple set (Space)
        Task{} taskSet = Task {
            Task[1.0, "Work hard", wango]
            Task[2.0, "Play hard", jim]
            Task[3.0, "Rock the boat", jim]
        };

        // Tuple operations
//        taskSet.insert(task);
//        taskSet.delete(task2);

        //
//        Task[] taskSequence = [task, task2, task3];

        char[] aName = task.getAssignee().first;
        //
        OpSys.println( [jim] );
        OpSys.println( [task] );
        OpSys.println( [task2] );
        //
        OpSys.println( [appStr] );
        //
        OpSys.println( ["Done with NtmuSpace!"] );
    }
}

type Person {
    real age;

    char[] first;
    char[] last;
    char[] fullName;

//    equation FL2Full (Person person) {
//        fullname == first.append(last);
//    }

//    function A solves FL2Full for (fullname) given (first,last) {
//
//    }

}

type Task {
    real estHours;

    char[] description;
    Person assignee;

    function Person getAssignee() {
        return assignee;
    }
}

// Equations within a space type
type Triangle {
    real side1;
    real side2;
    real size3;
    real angle12;

//    equation() {
//
//    }

}